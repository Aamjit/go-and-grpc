// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/init.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcService_GetHello_FullMethodName               = "/grpc_service.GrpcService/GetHello"
	GrpcService_ServerStreaming_FullMethodName        = "/grpc_service.GrpcService/ServerStreaming"
	GrpcService_ClientStreaming_FullMethodName        = "/grpc_service.GrpcService/ClientStreaming"
	GrpcService_BidirectionalStreaming_FullMethodName = "/grpc_service.GrpcService/BidirectionalStreaming"
)

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	GetHello(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HelloResponse, error)
	ServerStreaming(ctx context.Context, in *Lists, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, MessageLists], error)
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloResponse], error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) GetHello(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) ServerStreaming(ctx context.Context, in *Lists, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], GrpcService_ServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Lists, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_ServerStreamingClient = grpc.ServerStreamingClient[HelloResponse]

func (c *grpcServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, MessageLists], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[1], GrpcService_ClientStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, MessageLists]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_ClientStreamingClient = grpc.ClientStreamingClient[HelloRequest, MessageLists]

func (c *grpcServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[2], GrpcService_BidirectionalStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_BidirectionalStreamingClient = grpc.BidiStreamingClient[HelloRequest, HelloResponse]

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility.
type GrpcServiceServer interface {
	GetHello(context.Context, *NoParams) (*HelloResponse, error)
	ServerStreaming(*Lists, grpc.ServerStreamingServer[HelloResponse]) error
	ClientStreaming(grpc.ClientStreamingServer[HelloRequest, MessageLists]) error
	BidirectionalStreaming(grpc.BidiStreamingServer[HelloRequest, HelloResponse]) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcServiceServer struct{}

func (UnimplementedGrpcServiceServer) GetHello(context.Context, *NoParams) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello not implemented")
}
func (UnimplementedGrpcServiceServer) ServerStreaming(*Lists, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedGrpcServiceServer) ClientStreaming(grpc.ClientStreamingServer[HelloRequest, MessageLists]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedGrpcServiceServer) BidirectionalStreaming(grpc.BidiStreamingServer[HelloRequest, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}
func (UnimplementedGrpcServiceServer) testEmbeddedByValue()                     {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetHello(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Lists)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).ServerStreaming(m, &grpc.GenericServerStream[Lists, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_ServerStreamingServer = grpc.ServerStreamingServer[HelloResponse]

func _GrpcService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).ClientStreaming(&grpc.GenericServerStream[HelloRequest, MessageLists]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_ClientStreamingServer = grpc.ClientStreamingServer[HelloRequest, MessageLists]

func _GrpcService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).BidirectionalStreaming(&grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcService_BidirectionalStreamingServer = grpc.BidiStreamingServer[HelloRequest, HelloResponse]

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello",
			Handler:    _GrpcService_GetHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _GrpcService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _GrpcService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _GrpcService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/init.proto",
}
